{"ast":null,"code":"export default function CountdownTimer() {\n  const countDownDate = new Date(\"May 10, 2023\").getTime();\n  const now = new Date().getTime();\n  const difference = countDownDate - now;\n  let timeLeft = {};\n  if (difference > 0) {\n    timeLeft = {\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor(difference / (1000 * 60 * 60) % 24),\n      minutes: Math.floor(difference / 1000 / 60 % 60),\n      seconds: Math.floor(difference / 1000 % 60)\n    };\n  }\n  return timeLeft;\n}\n_c = CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["CountdownTimer","countDownDate","Date","getTime","now","difference","timeLeft","days","Math","floor","hours","minutes","seconds"],"sources":["/Users/hussain/projects/Chrysus-coming-soon/src/helpers/countdownTimer.js"],"sourcesContent":["export default function CountdownTimer() {\n\tconst countDownDate = new Date(\"May 10, 2023\").getTime();\n\tconst now = new Date().getTime();\n\tconst difference = countDownDate - now;\n\tlet timeLeft = {};\n\tif (difference > 0) {\n\n\t\ttimeLeft = {\n\t\t\tdays: Math.floor(difference / (1000 * 60 * 60 * 24)),\n\t\t\thours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n\t\t\tminutes: Math.floor((difference / 1000 / 60) % 60),\n\t\t\tseconds: Math.floor((difference / 1000) % 60)\n\t\t};\n\t}\n\treturn timeLeft;\n}\n"],"mappings":"AAAA,eAAe,SAASA,cAAc,GAAG;EACxC,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAAC,cAAc,CAAC,CAACC,OAAO,EAAE;EACxD,MAAMC,GAAG,GAAG,IAAIF,IAAI,EAAE,CAACC,OAAO,EAAE;EAChC,MAAME,UAAU,GAAGJ,aAAa,GAAGG,GAAG;EACtC,IAAIE,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAID,UAAU,GAAG,CAAC,EAAE;IAEnBC,QAAQ,GAAG;MACVC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACJ,UAAU,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;MACpDK,KAAK,EAAEF,IAAI,CAACC,KAAK,CAAEJ,UAAU,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;MACvDM,OAAO,EAAEH,IAAI,CAACC,KAAK,CAAEJ,UAAU,GAAG,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;MAClDO,OAAO,EAAEJ,IAAI,CAACC,KAAK,CAAEJ,UAAU,GAAG,IAAI,GAAI,EAAE;IAC7C,CAAC;EACF;EACA,OAAOC,QAAQ;AAChB;AAAC,KAfuBN,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}